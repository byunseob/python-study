# 프로그램의 코드가 커지면 자연히 코드의 구조를 재구성하기 마련이다.
# 예를 들면 큰 함수를 더 작은 함수로 분할한다.
# 자료 구조 헬퍼 클래스로 리팩토링한다.
# 기능을 서로 의조넞ㄱ인 여러 모듈로 분할한다.

# 언젠가는 너무 많은 모듈이 있어서 모듈들을 이해하기 쉽게 하려고 프로그램에 다른 계층을 추가해야 하는 시점이 온다.
# 파이썬은 이런 목적으로 패키지를 제공한다.
# 패키지는 다른 모듈을 포함하는 모듈을 말한다.

# 대부분은 디렉터리 안에 __init__ .py 라는 빈 파일을 넣는 방법으로 패키지를 정의한다.
# __init__.py 가 있으면 해당 디렉터리에 있는 다른 파이썬 파일은 디렉터리에 상대적인 경로로 임포트할 수 있다.


# 패키지가 제공하는 기능은 파이썬 프로그램에서 두 가지 주요 목적이 있다.

# 네임스페이스
# 패키지의 첫 번째 용도는 분리된 네임스페이스로 모듈들을 분할하는 것이다.
# 이 기능은 파일 이름이 같은 여러 모듈이 서로 다른 절대 경로를 갖게 해준다.

# 안정적인 API
# 패키지의 두 번째 용도는 외부 사용자에게 명화갛고 안정적인 API 를 제공하는 것이다.
# 오픈 소스 패키지처럼 다양하게 사용할 목적으로 API 를 작성할 때 릴리스 간의 변경 없이 안정적인 기능을 제공하고 싶다고 하자.
# 그러려면 외부 사용자에게서 내부 코드 구조를 숨겨야 한다.
# 이렇게 해두면 기조 ㄴ사용자의 코드를 망가 뜨리지 않고 패키지의 내부 모듈을 리팩토링 하고 개선 할 수있다.

# 파이썬에서는 모듈이나 패키지에 __all__ 이라는 특별한 속성으로 API 사용자에게 드러나는 외부 영역을 제한한다.
# __all__ 의 값은 공개 API 의 일부로 외부에 제공하려는 모듈 이름을 모두 담은 리스트다.
# 패키지를 사용하는 코드에서 from foo import * 를 실행하면 foo.__all__ 에 있는 속성만 임포트 된다.
# foo 에 __all__ 이 없으면 속성이름이 밑줄로 시작하지 않는 공개 속성만 임포트 된다.

# models.py
__all__ = ['Projectile']


class Projectile(object):
    def __init__(self, mass, velocity):
        self.mass = mass
        self.velocity = velocity

# 이제 이 API 의 공개 부분을 모두 mypackage 에서 사용 가능한 속성의 집합으로 제공하려고 한다.
# 이렇게 하면 mypackage.models 를 임포트하는 대신 mypackage 로부터 항상 직접 임포트 할 수 있다.
# 이 방식은 mypackage 의 내부 구조를 변경하더라도 API 를 사용하는 코드가 계속 동작함을 보장한다.

# 파이 패키지로 이렇게 동작하게 하려면 mypackage 디렉토리에 있는 __init__.py 파일을 수정해야 한다.
# 이 파일은 실제로 임포트될 때 mypackage 모듈의 내용이 된다.
# 따라서 __init__.py 로 임포트하는 것을 제한하여 mypackage 의 API 를 명시적으로 설정할 수 있다.
# 이미 내부 모듈은 모두 __all__ 을 명시하고 있으므로, 단순히 내부 모듈에서 모든 것을 임포트하고
# __all__을 이에 맞춰 업데이트 하면 mypackage 의 공개 인터페이스를 외부에 드러낼 수 있다.


# __init__.py
# __all__ = []
# from . models import *
# __all__ += models.__all__


# import * 를 주의하자
# 비교적 명시적이지 않음
# 덮어쓰거나 모든 참조 모듈을 확인해야 할 수도 있음


