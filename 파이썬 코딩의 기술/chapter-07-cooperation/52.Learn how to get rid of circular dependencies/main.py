# 불가피하게 다른 이들과 협력하는 동안 모듈 사이의 순환 의존성을 발견하기 마련이다.
# 순환 의존성의 문제는 모듈의 속성이 해당 속성의 코드를 실행하기 전에는 정의되지 않는다는 점이다.

# 다음은 파이썬에서 깊이 우선 방식으로 모듈을 임포트 하면서 실제로 하는 일이다.
# 1. sys.path 에 들어 있는 위치에서 여러분의 모듈을 검색한다.
# 2. 모듈에서 코드를 로드하고 코드가 컴파일되게 한다.
# 3. 대응하는 빈 모듈 객체를 생성한다.
# 4. 모듈을 sys.modules 에 사입한다.
# 5. 모듈 객체에 있는 코드를 실행하여 모듈의 내용을 정의한다.


# 순환 의존성을 없애는 세가지 방법
# 1. 임포트 순서의 변경
# 이 방법으로 AttributeError 은 피할수 있지만 PEP8 스타일 가이드를 어기기 된다.
# 파일에서 나중에 임포트하는 방법은 불안정하기도 하고 코드의 순서를 약간만 바꿔도 모듈이 동작하지 않는 원이이 된다.
# 따라서 순환 의존성 문제를 해결하려고 임포트 순서를 변경하는 방법은 피해야 한다.


# 2. 임포트 설정 실행
# 임포트 하는 시점에 모듈에서 부용을 최소하 하는 것
# 모듈에는 함수, 클래스, 상수만 정의해야 한다.
# 임포트 시점에 실제 함수를 실행하는 일은 피해야 한다.
# 그런 다음 각 모듈은 다른 모듈이 임포트 되고 나서 한 번만 실행할 configure 함수를 제공해야 한다.
# configure 의 목적은 다른 모듈의 속성에 접근해서 각 모듈의 상태를 준비하는 것이다.
# 모든 모듈이 임포트된 후 configure 를 실행하므로 모든 속성이 반드시 정의되어 있어야 한다.

# 인티그레이션 하는 쪽에서 별개의 실행 단계 세개로 구성한다.
# 모든 것을 임포트 하는 단계, 모든 것을 설정하는 단계, 첫번째 액티비티를 실행하는 단계


# 이 방법은 많은 상황에서 잘 동작하며 의존성 주입과 같은 패턴을 가능하게 한다.
# 하지만 명시적인 configure 단계가 가능한 형태로 코드를 구성하는 건 어려울 수 있다.
# 모듈에 별개의 두 단계를 두면 설정에서 객체의 정의가 분리되기 때문에 코드를 더 이해하기 어렵다.

# 3. 동적 임포트
# 가장 간단한 해결채긍로 import 문을 함수나 메서드에서 사용하는 것이다.
# 이 방법은 프로그램이 실행하는 동안 모듈 임포트가 발생하며, 프로그램이 처음 시작해서 모듈을 초기화하는 동안에는 발생하지 않으므로 동적 임포트라고 한다.
# 이 방법은 앞에서 설명한 임포트, 설정, 실행 단계와 비슷한 효과를 낸다.
# 차이는 이 방법을 이용하면 모듈을 정의하고 임포트 하는 방식을 구조적으로 변경할 필요가 없다는 점이다.
# 단순히 다른 모듈에 접근해야 하는 시점까지 순환 임포트를 미루는 방식이기 때문이다.


# 일반적으로 이런 동적 임포트를 피하는게 좋다.
# import 문의 비용은 무시하지 못할 정도며, 특히 복잡한 루프에서는 좋지 않다.
# 동적 임포트는 실행을 미루는 동작으로 런타임에 상당히 심각한 실패를 야기한다.

